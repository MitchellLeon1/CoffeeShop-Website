/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package finalprojectjava;


import java.sql.*;
import javax.swing.DefaultListModel;
import javax.swing.JList;
import javax.swing.JOptionPane;
/**
 *
 * @author yair
 */
public class DisplayOrders extends javax.swing.JFrame {

    /**
     * Creates new form DisplayOrders
     */
    public DisplayOrders() {
        initComponents();
        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        lstOrders = new javax.swing.JList<>();
        btnDeleteOrder = new javax.swing.JButton();
        btnAddItem = new javax.swing.JButton();
        txtDeleteOrderID = new javax.swing.JTextField();
        btnCreateTable1 = new javax.swing.JButton();
        btnDisplayAll1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        btnClear = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        menuExit = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lstOrders.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(lstOrders);

        btnDeleteOrder.setText("Change Order By OrderID");
        btnDeleteOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteOrderActionPerformed(evt);
            }
        });

        btnAddItem.setText("Add Item");
        btnAddItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddItemActionPerformed(evt);
            }
        });

        txtDeleteOrderID.setToolTipText("Change with Order Number");

        btnCreateTable1.setText("Create Table");
        btnCreateTable1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateTable1ActionPerformed(evt);
            }
        });

        btnDisplayAll1.setText("Display All");
        btnDisplayAll1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDisplayAll1ActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 102, 102));
        jLabel1.setText("DISPLAY ORDERS");

        jLabel3.setText("OrderID ");

        btnClear.setText("Clear List");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        jMenu1.setText("File");

        menuExit.setText("Exit");
        menuExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuExitActionPerformed(evt);
            }
        });
        jMenu1.add(menuExit);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(49, 49, 49)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(105, 105, 105)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 451, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(67, 67, 67)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btnClear, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnDeleteOrder)
                            .addComponent(btnAddItem, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnDisplayAll1, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnCreateTable1, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(103, 103, 103)
                                .addComponent(txtDeleteOrderID, javax.swing.GroupLayout.PREFERRED_SIZE, 498, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(278, 278, 278)
                                .addComponent(jLabel3)))))
                .addContainerGap(199, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(67, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(38, 38, 38)
                        .addComponent(btnCreateTable1, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(11, 11, 11)
                        .addComponent(btnDisplayAll1, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnAddItem, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 269, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(35, 35, 35)
                        .addComponent(jLabel3)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnClear, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtDeleteOrderID, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnDeleteOrder, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(125, 125, 125))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddItemActionPerformed
        // TODO add your handling code here:
        try (Connection conn = getConnection()) {
    Statement statement = createStatement(conn);
    addOrder(conn, 1, 2, 3, 2.5, 12.5); 
    addOrder(conn, 2, 3, 5, 3.5, 13.3); 
    addOrder(conn, 3, 4, 6, 4.5, 61.3); 
    addOrder(conn, 4, 5, 7, 5.5, 34.3); 
    addOrder(conn, 5, 6, 8, 6.5, 9.3); 
    addOrder(conn, 6, 7, 9, 7.5, 42.3); 
    addOrder(conn, 7, 8, 10, 8.5, 13.3); 
    displayTable(statement);
    } catch (SQLException ex) {
        System.out.println("Database connection error: " + ex.getMessage());
    }

        
    }//GEN-LAST:event_btnAddItemActionPerformed

    private void btnCreateTable1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateTable1ActionPerformed
        // TODO add your handling code here:
        Connection conn = getConnection();
        Statement statement = createStatement(conn);
        createTable(statement);
    }//GEN-LAST:event_btnCreateTable1ActionPerformed

    private void btnDisplayAll1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDisplayAll1ActionPerformed
        // TODO add your handling code here:
        try (Connection conn = getConnection()) {
            Statement statement = createStatement(conn);
            displayTable(statement, lstOrders);
        } catch (SQLException ex) {
            System.out.println("Database connection error: " + ex.getMessage());
        }


        
    }//GEN-LAST:event_btnDisplayAll1ActionPerformed
    
    private static void displayTable(Statement statement, JList<String> list) {
    String sql = "SELECT * FROM Orders";
    try (ResultSet result = statement.executeQuery(sql)) {
        DefaultListModel<String> model = new DefaultListModel<>();
        while (result.next()) {
            String orderInfo = "Order ID: " + result.getInt("orderID") +
                               ", Customer ID: " + result.getInt("customerID") +
                               ", Coffee ID: " + result.getInt("coffeeID") +
                               ", Number of Orders: " + result.getDouble("numberOrder") +
                               ", Total: " + result.getDouble("Total");
            model.addElement(orderInfo);
        }
        list.setModel(model);
    } catch (SQLException ex) {
        System.out.println("Failed to display table: " + ex.getMessage());
        }
    }

    private static void addOrder(Connection conn, int orderID, int customerID, int coffeeID, double numberOrder, double total) {
    String sql = "INSERT INTO Orders (orderID, customerID, coffeeID, numberOrder, Total) VALUES (?, ?, ?, ?, ?)";
    try (PreparedStatement statement = conn.prepareStatement(sql)) {
        statement.setInt(1, orderID);
        statement.setInt(2, customerID);
        statement.setInt(3, coffeeID);
        statement.setDouble(4, numberOrder);
        statement.setDouble(5, total);
        int rowsInserted = statement.executeUpdate();
        if (rowsInserted > 0) {
            System.out.println("A new order was added successfully!");
        }
    } catch (SQLException ex) {
        System.out.println("Failed to add order: " + ex.getMessage());
    }
}

    private static void displayTable(Statement statement) {
    String sql = "SELECT * FROM Orders";
    try {
        ResultSet rs = statement.executeQuery(sql);
        while (rs.next()) {
            int orderID = rs.getInt("orderID");
            int customerID = rs.getInt("customerID");
            int coffeeID = rs.getInt("coffeeID");
            double numberOrder = rs.getDouble("numberOrder");
            double total = rs.getDouble("Total");

            System.out.println("Order ID: " + orderID);
            System.out.println("Customer ID: " + customerID);
            System.out.println("Coffee ID: " + coffeeID);
            System.out.println("Number of Orders: " + numberOrder);
            System.out.println("Total: " + total);
            System.out.println();
        }
    } catch (SQLException ex) {
        System.out.println("Failed to display table.");
    }
}

    private void btnDeleteOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteOrderActionPerformed
        // TODO add your handling code here:
        Connection conn = getConnection();
        Statement stmt = createStatement(conn);
        int orderID = Integer.parseInt(txtDeleteOrderID.getText());

        deleteRow(stmt, orderID);
    }//GEN-LAST:event_btnDeleteOrderActionPerformed

    private void menuExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuExitActionPerformed
        // TODO add your handling code here:
        int confirmed = JOptionPane.showConfirmDialog(this, 
            "Are you sure you want to exit?", "Confirm Exit", 
            JOptionPane.YES_NO_OPTION);
    
        if (confirmed == JOptionPane.YES_OPTION) {
            // Close the application
            dispose();
            System.exit(0);
        }
    }//GEN-LAST:event_menuExitActionPerformed

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        // TODO add your handling code here:
        lstOrders.setModel(new DefaultListModel<>());
    }//GEN-LAST:event_btnClearActionPerformed
    
    private static void deleteRow(Statement statement, int customerID) {
    String sql = "DELETE FROM Order WHERE customerID = " + customerID;
        try {
            int rowsDeleted = statement.executeUpdate(sql);
            System.out.println(rowsDeleted + " row(s) deleted.");
        } catch (SQLException ex) {
            System.out.println("Failed to delete row.");
        }
    }
 

    /*
    define createStatement(Connection) that returns a Statement
    */
    
    private static Statement createStatement(Connection conn){
        Statement statement = null;
        try{
            statement = conn.createStatement();
            System.out.println("Statement created");

        }catch(SQLException ex){
            System.out.println("Statement not created");
        }
        return statement;
    }
    
    /*
    define createTable(Statement)
    */
    
    private static void createTable(Statement statement){
        String sql = "CREATE TABLE Order(orderID INTEGER, customerID INTEGER, coffeeID INTEGER, numberOrder DOUBLE, Total DOUBLE )";
        try{
            statement.execute(sql);
            System.out.println("Table Order created");
        }catch(SQLException ex){
            System.out.println("Failed to create the table orders");
        }
    }
    private static Connection getConnection(){
        Connection connection = null;
        try{
            connection = DriverManager.getConnection(DATABASE, USER, PASSWORD);
            System.out.println("DATABSE CONNECTED");
        }catch(SQLException ex){
            System.out.println("CONNECTION FAILED");
        }
        return connection;
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DisplayOrders.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DisplayOrders.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DisplayOrders.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DisplayOrders.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DisplayOrders().setVisible(true);
            }
        });
    }
    
    //added variables
    private static final String DATABASE = "jdbc:derby://localhost:1527/dbCoffeeStoreData; create=true";
    private static final String USER ="me";
    private static final String PASSWORD = "me";

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddItem;
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnCreateTable1;
    private javax.swing.JButton btnDeleteOrder;
    private javax.swing.JButton btnDisplayAll1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JList<String> lstOrders;
    private javax.swing.JMenuItem menuExit;
    private javax.swing.JTextField txtDeleteOrderID;
    // End of variables declaration//GEN-END:variables
}
