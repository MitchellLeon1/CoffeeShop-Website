/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package finalprojectjava;

import java.sql.*;
import javax.swing.DefaultListModel;
import javax.swing.JList;
import javax.swing.JOptionPane;

/**
 *
 * @author Mira
 */
public class DisplayCustomer extends javax.swing.JFrame {

    /**
     * Creates new form DisplayCustomer
     */
    public DisplayCustomer() {
        initComponents();
        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        lstCustomers = new javax.swing.JList<>();
        btnDisplayAll = new javax.swing.JButton();
        btnAddItem = new javax.swing.JButton();
        btnCreateTable = new javax.swing.JButton();
        btnDeleteCustomer = new javax.swing.JButton();
        txtCustomerID = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        btnClear = new javax.swing.JButton();
        txtEmail = new javax.swing.JTextField();
        txtFirstName = new javax.swing.JTextField();
        txtLastName = new javax.swing.JTextField();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        menuExit = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lstCustomers.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(lstCustomers);

        btnDisplayAll.setText("Display All");
        btnDisplayAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDisplayAllActionPerformed(evt);
            }
        });

        btnAddItem.setText("Add Item");
        btnAddItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddItemActionPerformed(evt);
            }
        });

        btnCreateTable.setText("Create Table");
        btnCreateTable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateTableActionPerformed(evt);
            }
        });

        btnDeleteCustomer.setText("Delete Item by ID");

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 0, 255));
        jLabel1.setText("Customer");
        jLabel1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        btnClear.setText("Clear");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        jMenu1.setText("File");

        menuExit.setText("Exit");
        menuExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuExitActionPerformed(evt);
            }
        });
        jMenu1.add(menuExit);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(91, 91, 91)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 234, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 56, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnDisplayAll, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnCreateTable, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnDeleteCustomer, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnAddItem, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnClear, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(48, 48, 48)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 371, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(txtFirstName, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(txtLastName, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(txtCustomerID, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(53, 53, 53))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(56, 56, 56)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtFirstName, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtLastName, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 16, Short.MAX_VALUE)
                        .addComponent(btnCreateTable, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnDisplayAll, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnAddItem, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(14, 14, 14)
                        .addComponent(btnClear, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnDeleteCustomer, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtCustomerID, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(71, 71, 71))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCreateTableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateTableActionPerformed
        // TODO add your handling code here:Connection conn = getConnection();
        Connection conn = getConnection();
        Statement statement = createStatement(conn);
        createTable(statement);
        
    }//GEN-LAST:event_btnCreateTableActionPerformed

    private void menuExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuExitActionPerformed
        // TODO add your handling code here:
         int confirmed = JOptionPane.showConfirmDialog(this, 
            "Are you sure you want to exit?", "Confirm Exit", 
            JOptionPane.YES_NO_OPTION);
    
        if (confirmed == JOptionPane.YES_OPTION) {
            // Close the application
            dispose();
            System.exit(0);
        }
    }//GEN-LAST:event_menuExitActionPerformed

    private void btnDisplayAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDisplayAllActionPerformed
        // TODO add your handling code here:
         try (Connection conn = getConnection()) {
            Statement statement = createStatement(conn);
            displayTable(statement, lstCustomers);
        } catch (SQLException ex) {
            System.out.println("Database connection error: " + ex.getMessage());
        }
    }//GEN-LAST:event_btnDisplayAllActionPerformed

    private void btnAddItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddItemActionPerformed
        // TODO add your handling code here:
     // Get user input
    String Firstname = txtFirstName.getText().trim();
    String Lastname = txtLastName.getText().trim();
    String email = txtEmail.getText().trim();

    // Check if name is too long
    if (Firstname.length() > 50) {
        JOptionPane.showMessageDialog(this, "Name is too long (max 50 characters)");
        return;
    }
    if (Lastname.length() > 50) {
        JOptionPane.showMessageDialog(this, "Name is too long (max 50 characters)");
        return;
    }

    // Check if email is valid
    if (!isValidEmail(email)) {
        JOptionPane.showMessageDialog(this, "Invalid email address");
        return;
    }

    // Insert the data into the database
    try (Connection conn = getConnection()) {
        Statement stmt = conn.createStatement();
        String sql = "INSERT INTO Customer (FirstName, LastName, email) VALUES ('" + Firstname + "', '" + Lastname + ", " + email + "')";
        stmt.executeUpdate(sql);
        JOptionPane.showMessageDialog(this, "Customer added successfully");
    } catch (SQLException ex) {
        JOptionPane.showMessageDialog(this, "Failed to add customer: " + ex.getMessage());
    }
} 

private static void addCustomer(Connection conn, String firstName, String lastName, String email, String address, double CreditLimit) {
    String sql = "INSERT INTO Customer (firstName, lastName, email, address, CreditLimit) VALUES ('" + firstName + "', '" + lastName + "', '" + email + "', '" + address + "'," + CreditLimit +")";
    try (Statement statement = conn.createStatement()) {
        int rowsInserted = statement.executeUpdate(sql);
        System.out.println(rowsInserted + " row(s) inserted.");
    } catch (SQLException ex) {
        System.out.println("Failed to insert row: " + ex.getMessage());
    }
    }//GEN-LAST:event_btnAddItemActionPerformed

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        // TODO add your handling code here:
        lstCustomers.setModel(new DefaultListModel<>());
    }//GEN-LAST:event_btnClearActionPerformed
    
    private static void displayTable(Statement statement, JList<String> list) {
    String sql = "SELECT * FROM Customer";
    try (ResultSet result = statement.executeQuery(sql)) {
        DefaultListModel<String> model = new DefaultListModel<>();
        while (result.next()) {
            String customerInfo = "Customer Number: " + result.getInt("CustomerNumber") +
                               ", First Name: " + result.getString("FirstName") +
                               ", Last Name: " + result.getString("LastName") +
                               ", Street: " + result.getString("Street") +
                               ", City: " + result.getString("City") +
                               ", Zip: " + result.getInt("Zip") +
                               ", Email: " + result.getString("Email") +
                               ", Address: " + result.getString("Address") +
                               ", Credit Limit: " + result.getDouble("CreditLimit");
            model.addElement(customerInfo);
        }
        list.setModel(model);
    } catch (SQLException ex) {
        System.out.println("Failed to display table: " + ex.getMessage());
        }
    }
    
    private boolean isValidEmail(String email) {
        // Regular expression pattern for email validation
        String regex = "^[A-Za-z0-9+_.-]+@[A-Za-z0-9.-]+$";

        // Checks if the email matches the pattern
        return email.matches(regex);
    }

  

        /*
    define createStatement(Connection) that returns a Statement
    */
    
    private static Statement createStatement(Connection conn){
        Statement statement = null;
        try{
            statement = conn.createStatement();
            System.out.println("Statement created");

        }catch(SQLException ex){
            System.out.println("Statement not created");
        }
        return statement;
    }
    
    /*
    define createTable(Statement)
    */
    
    private static void createTable(Statement statement){
        String sql = "CREATE TABLE Customer(CustomerNumber INTEGER, FirstName VARCHAR(20),LastName VARCHAR(20), Street VARCHAR(50), City VARCHAR(20), Zip INTEGER, Email VARCHAR(50), Address VARCHAR(50), CreditLimit DOUBLE)";
        try{
            statement.execute(sql);
            System.out.println("Table Customer created");
        }catch(SQLException ex){
            System.out.println("Failed to create the table Customer");
        }
    }
    private static Connection getConnection(){
        Connection connection = null;
        try{
            connection = DriverManager.getConnection(DATABASE, USER, PASSWORD);
            System.out.println("DATABSE CONNECTED");
        }catch(SQLException ex){
            System.out.println("CONNECTION FAILED");
        }
        return connection;
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DisplayCustomer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DisplayCustomer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DisplayCustomer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DisplayCustomer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DisplayCustomer().setVisible(true);
            }
        });
    }
    //added variables
    private static final String DATABASE = "jdbc:derby://localhost:1527/dbCoffeeStoreData; create=true";
    private static final String USER ="me";
    private static final String PASSWORD = "me";

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddItem;
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnCreateTable;
    private javax.swing.JButton btnDeleteCustomer;
    private javax.swing.JButton btnDisplayAll;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JList<String> lstCustomers;
    private javax.swing.JMenuItem menuExit;
    private javax.swing.JTextField txtCustomerID;
    private javax.swing.JTextField txtEmail;
    private javax.swing.JTextField txtFirstName;
    private javax.swing.JTextField txtLastName;
    // End of variables declaration//GEN-END:variables
}
